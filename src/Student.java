import java.util.ArrayList;
import java.util.HashMap;
import java.util.InputMismatchException;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : Student.java
//  @ Date : 1/8/2014
//  @ Author : Meher, Harika, Omair, Nikhila
//
//


/**
 * This class describes the functionality of a student
 * @author NIKHILA, HARIKA
 *
 */
public class Student {
	
	public String studentID;
	String password;
	public String firstName;
	public String lastName;
	public String address;
	public String bloodGroup;
	public long phoneNumber;
	public java.util.Date dob;
	public int year;
	public String eduBackground;
	public String branch;
	public int currentYear;
	public boolean isRegistered;
	
	/**
	 * Parameterized constructor which instantiates the attributes of this class
	 * if the student with given sid already exists
	 * @param sid
	 * @author NIKHILA, HARIKA 
	 */
	public Student(String sid)
	{
		DataHelper dh=new DataHelper();
		Student s = new Student();
		s.studentID = sid;
		if(dh.list_Student.contains(s))
		{
			isRegistered = true;
			s=dh.list_Student.get(dh.list_Student.indexOf(s));
			firstName = s.firstName;
			lastName = s.lastName;
			studentID = s.studentID;
			password = s.password;
			address = s.address;
			bloodGroup = s.bloodGroup;
			phoneNumber = s.phoneNumber;
			dob = s.dob;
			year = s.year;
			eduBackground = s.eduBackground;
			branch = s.branch;
			currentYear = s.currentYear;
		}
		else 
			isRegistered = false;
	}
	
	/**
	 * Default constructor
	 * @author NIKHILA, HARIKA
	 */
	public Student()
	{
		isRegistered = false;
	}
	
	/**
	 * Method which creates the profile of student if he is registering with the system
	 * or updates the profile when requested 
	 * @author NIKHILA, HARIKA
	 */
	public void updateProfile()
	{
		Scanner sc = new Scanner(System.in);
	
		if(isRegistered = true)	// if the student is already registered, ask for updating profile
		{
			System.out.println("Your details are: \n" + this);
			System.out.println("\n Choose the field you want to update :\n1.First Name\n2.Last Name\n"
					+ "3.Address\n4.Blood Group\n5.Phone Number\n6.Password");
			int ch = -1;
			try
			{
				ch = sc.nextInt();
			}
			catch(InputMismatchException e)
			{
			}
			switch(ch)
			{
				case 1:
						System.out.println("\nEnter First Name : ");
						sc=new Scanner(System.in);
						this.firstName=sc.nextLine();
						break;
				case 2:
						System.out.println("\nEnter Last Name : ");
						sc=new Scanner(System.in);
						this.lastName=sc.nextLine();
						break;
				case 3:
						System.out.println("\nEnter Address : ");
						sc=new Scanner(System.in);
						this.address=sc.nextLine();
						break;
				case 4:
						System.out.println("\nEnter Blood Group : ");
						sc=new Scanner(System.in);
						this.bloodGroup=sc.nextLine();
						break;
				case 5:
						System.out.println("\nEnter Phone Number : ");
						sc=new Scanner(System.in);
						this.phoneNumber=sc.nextLong();
						break;
				case 6:
						System.out.println("\nEnter Password : ");
						sc=new Scanner(System.in);
						this.password=sc.nextLine();
						break;
				default:
				{
						System.out.println("\ninvalid choice !!!");
						System.exit(1);
				}
					
			}
			System.out.println("Update Successful !!!");
		}
		else  // if the student is not yet registered, ask for creating profile
		{
			System.out.println("Enter your details: ");
			
			System.out.println("\nEnter First Name : ");
			sc=new Scanner(System.in);
			this.firstName=sc.nextLine();
			
			System.out.println("\nEnter Last Name : ");
			sc=new Scanner(System.in);
			this.lastName=sc.nextLine();
			
			System.out.println("\nEnter Address : ");
			sc=new Scanner(System.in);
			this.address=sc.nextLine();
			
			System.out.println("\nEnter Blood Group : ");
			sc=new Scanner(System.in);
			this.bloodGroup=sc.nextLine();
			
			System.out.println("\nEnter Phone Number : ");
			sc=new Scanner(System.in);
			this.phoneNumber=sc.nextLong();
			
			System.out.println("\nEnter Password : ");
			sc=new Scanner(System.in);
			this.password=sc.nextLine();
			
			System.out.println("\nEnter Educational Background : ");
			sc=new Scanner(System.in);
			this.eduBackground=sc.nextLine();
			
			System.out.println("\nEnter Branch : ");
			sc=new Scanner(System.in);
			this.branch=sc.nextLine();
			
			System.out.println("\nRegistered Successfully !!!!");
		}
		
	}
	
	/**
	 * This method gets the profile of the student 
	 * @author NIKHILA, HARIKA
	 */
	public void getProfile() 
	{
		System.out.println("\nSTUDENT INFORMATION :\n"+this.toString());
	}
	
	/**
	 * This method shows all the courses and calls registerForCourse function if requested by the student
	 * @author NIKHILA, HARIKA
	 */
	public void viewCourses() 
	{
		DataHelper dh=new DataHelper();
		Course s,c;
		String cid=null;
		List<Student> students_in_course;
		List<Course> reg_course_list=new ArrayList<Course>();
		List<Course> all_course_list = dh.list_Course;
		System.out.println("All the Courses available : ");
		System.out.println("Course ID"+"\t"+"Course Name"+"\t\t"+"Credits");
		
		for(int i=0; i<all_course_list.size(); i++)
		{
			s=all_course_list.get(i);
			System.out.println(s.courseID+"\t\t"+s.courseName+"     \t"+s.numOfCredits);
		}
		
		System.out.println("\nYour registered Courses are : ");
		System.out.println("Course ID"+"\t"+"Course Name"+"\t\t"+"Credits");
		
		for(int i=0; i<all_course_list.size(); i++)
		{
			students_in_course=dh.viewAllStudentsByCourse(all_course_list.get(i));
			if(students_in_course.contains(this))
			{	
				s=all_course_list.get(i);
				reg_course_list.add(s);
				System.out.println(s.courseID+"\t\t"+s.courseName+"     \t"+s.numOfCredits);
			}
		}
		
		int ch = 0;
		do
		{
			System.out.println("\nDo you want to register for a course? \n1.Yes \n2.No");
			Scanner sc=new Scanner(System.in);
			try
			{
				ch = sc.nextInt();
			}
			catch(InputMismatchException e)
			{
				ch = -1;
			}
			if(ch==1)
			{
				System.out.print("\nEnter course ID : ");
				sc=new Scanner(System.in);
				cid = sc.nextLine();
				c=new Course();
				c.courseID=cid;
				if(dh.list_Course.contains(c))
				{
					if(!reg_course_list.contains(c))
						registerForCourse(c);
					else
						System.out.println("\nCourse already registered!!!");
				}
				else
					System.out.println("\nInvalid Course ID !!!");
			}
			else if(ch==2)
			{
				
			}
			else
				System.out.println("\nInvalid choice !!!");
			
		}while(ch != 2);
		
	}
	
	/**
	 * This method register the student to a particular course
	 * @param crse is course object to which the student has to be registered
	 * @author NIKHILA, HARIKA
	 */
	public void registerForCourse(Course crse) 
	{
		DataHelper dh=new DataHelper();
		Course s;
		List<Student> students_in_course;
		List<Course> all_course_list = dh.list_Course;
		System.out.println("\nRegistered for Course Successfully !!!\n\n");
		System.out.println("Your registered Courses are : ");
		System.out.println("Course ID"+"\t"+"Name of the course"+"\t"+"Credits");
		
		for(int i=0; i<all_course_list.size(); i++)
		{
			students_in_course=dh.viewAllStudentsByCourse(all_course_list.get(i));
			if(students_in_course.contains(this))
			{	
				s=all_course_list.get(i);
				System.out.println(s.courseID+"\t\t"+s.courseName+"\t"+s.numOfCredits);
			}
			if(all_course_list.get(i).courseID.equalsIgnoreCase(crse.courseID))
			{
				crse=all_course_list.get(i);
			}
		}
		
		System.out.println(crse.courseID+"\t\t"+crse.courseName+"     \t"+crse.numOfCredits);
		
	}
	
	/**
	 * This method shows the attendance of this student in all the courses registered to
	 * @author NIKHILA, HARIKA
	 */
	public void viewAttendance() 
	{
		AttendanceManager am1=new AttendanceManager();
		HashMap<Course,Integer> attndnce_in_course = am1.getAttendanceByStudent(this);
		System.out.println("CourseID" + "\t" + "Attendance");
		for(Map.Entry<Course, Integer> entry : attndnce_in_course.entrySet() )
		{
			System.out.println(entry.getKey().courseID + "\t\t" + entry.getValue());
		}
		
	}
	
	/**
	 * This method shows the marks of this student in a particular course
	 * @author NIKHILA, HARIKA
	 */
	public void viewResults() 
	{
		MarksManager mm = new MarksManager();
		HashMap<Course,Integer> marks_in_course = mm.getMarksByStudent(this);
		System.out.println("CourseID" + "\t" + "Marks");
		for(Map.Entry<Course, Integer> entry : marks_in_course.entrySet() )
		{
			System.out.println(entry.getKey().courseID + "\t\t" + entry.getValue());
		}
	}
	
	/**@author Omair
	 * To string method
	 */
	public String toString() {
		return ""
				+ "Student ID:"+studentID+"\n"
				+ "Name:"+firstName+" "+lastName+"\n"
				+ "Phone Numbers:"+phoneNumber+"\n"
				+ "Background:"+eduBackground+"\n"
				+ "Branch:"+branch+"\n"
				+ "Current Year:"+currentYear+"\n"
				+ "Registered:"+isRegistered+"\n";
	}
	
	/**
	 * Override method which generates the hash code of this object
	 */
	public int hashCode() {
		
		  return studentID.hashCode();
		}
	
	/**
	 * @author Omair
	 * Checks for equality of Student with Student ID as the field
	 */
	@Override
	public boolean equals(Object o) {
		Student s = (Student) o;
		if(this.studentID.equalsIgnoreCase(s.studentID))
			return true;
		else
			return false;
	}
	
	
}
